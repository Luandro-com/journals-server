# import User, Content, DateTime, Payment, Issue, File from "generated/prisma.graphql"
# import * from "types/user.graphql"
# import * from "types/journal.graphql"
# import * from "types/admin.graphql"
# import * from "types/payment.graphql"

scalar Upload

type Query {
  user: User
  users: [User]
  admins: [User]
  payments: [Payment]
  issues: [Issue]
  allIssues: [Issue]
  openCalls: [Issue]
  issue(issueKey: String!): Issue
  article(articleId: ID!): Article
  content: Content
  articles: [Article]
  uploads: [File]
}

type Mutation {
  signup(email: String! password: String! cart: String): AuthPayload!
  login(email: String! password: String!): AuthPayload!
  subscribe: Boolean
  unsubscribe: Boolean
  updateUser(input: UserInput): User
  updateUsersRoles(userIds: [ID] role: Role!): Int
  createArticle(input: ArticleInput! issueId: ID! fileId: ID citationIds: [ID]): Article
  updateArticle(input: ArticleInput! articleId: ID! fileId: ID citationIds: [ID]): Article
  publishArticle(articleId: ID!): Article
  deleteArticle(articleId: ID!): Article
  payment(input: PaymentInput): Payment
  createIssue(input: IssueInput!): Issue
  publishIssue(issueId: ID!): Issue
  publishIssueCall(issueId: ID!): Issue
  updateIssue(issueId: ID! input: IssueUpdateInput!): Issue
  deleteIssue(issueId: ID!): Issue
  selectEditorial(articleId: ID! issueId: ID!): Issue
  unselectEditorial(articleId: ID! issueId: ID!): Issue
  selectArticles(articleIds: [ID]! issueId: ID!): Issue
  unselectArticles(articleIds: [ID]! issueId: ID!): Issue
  updateContent(input: ContentInput!): Content
  uploadFile(file: Upload!): File
  uploadFiles(file: Upload!): [File]
  renameFile(file: Upload!): File!
  deleteFile(file: Upload!): File!
  sendPasswordResetEmail(email: String!): Boolean
  resetPassword(password: String! hash: String!): Boolean
}
